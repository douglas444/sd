# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

import redes3_pb2 as redes3__pb2


class Redes3Stub(object):
  # missing associated documentation comment in .proto file
  pass

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.execute_command = channel.unary_unary(
        '/Redes3/execute_command',
        request_serializer=redes3__pb2.Command.SerializeToString,
        response_deserializer=redes3__pb2.Log.FromString,
        )
    self.listen = channel.unary_stream(
        '/Redes3/listen',
        request_serializer=redes3__pb2.ListenRequest.SerializeToString,
        response_deserializer=redes3__pb2.Log.FromString,
        )


class Redes3Servicer(object):
  # missing associated documentation comment in .proto file
  pass

  def execute_command(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def listen(self, request, context):
    # missing associated documentation comment in .proto file
    pass
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_Redes3Servicer_to_server(servicer, server):
  rpc_method_handlers = {
      'execute_command': grpc.unary_unary_rpc_method_handler(
          servicer.execute_command,
          request_deserializer=redes3__pb2.Command.FromString,
          response_serializer=redes3__pb2.Log.SerializeToString,
      ),
      'listen': grpc.unary_stream_rpc_method_handler(
          servicer.listen,
          request_deserializer=redes3__pb2.ListenRequest.FromString,
          response_serializer=redes3__pb2.Log.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'Redes3', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
